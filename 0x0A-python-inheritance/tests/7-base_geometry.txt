==========================
The ``7-base_geometry`` module
==========================

Using ``integer_validator``
---------------------------

First import "integer_validator" from the "7-base_geometry" module:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now we can use it:

    >>> bg = BaseGeometry()

    >>> bg.integer_validator("my_int", 12)

    >>> bg.integer_validator("", 22)

    >>> bg.integer_validator("width", 89)

    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    TypeError: name must be an integer

    >>> bg.integer_validator("", "John")
    Traceback (most recent call last):
    TypeError:  must be an integer

    >>> bg.integer_validator("name", 12.8)
    Traceback (most recent call last):
    TypeError: name must be an integer

    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ValueError: age must be greater than 0

    >>> bg.integer_validator("age", -7)
    Traceback (most recent call last):
    ValueError: age must be greater than 0

    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

    >>> bg.integer_validator("list", [1, 2, 3])
    Traceback (most recent call last):
    TypeError: list must be an integer

    >>> bg.integer_validator("my_int")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> bg.integer_validator("my_int", None)
    Traceback (most recent call last):
    TypeError: my_int must be an integer

    >>> bg.integer_validator("tuple", (2, 3))
    Traceback (most recent call last):
    TypeError: tuple must be an integer

    >>> bg.integer_validator("dict", {"name": "Julian", "Loves": "Cats"})
    Traceback (most recent call last):
    TypeError: dict must be an integer

    >>> bg.integer_validator("set", {1, 2, 3})
    Traceback (most recent call last):
    TypeError: set must be an integer

    >>> bg.integer_validator("bool", True)
    Traceback (most recent call last):
    TypeError: bool must be an integer

    >>> bg.integer_validator("bool", False)
    Traceback (most recent call last):
    TypeError: bool must be an integer

    >>> bg.integer_validator("my_int", (2,))
    Traceback (most recent call last):
    TypeError: my_int must be an integer
